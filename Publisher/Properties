#ifndef __PROPERTIES_H__
#define __PROPERTIES_H__

#include <vector>
#include <initializer_list>
#include "Point.h"
#include "Color.h"

using Points = std::vector<Point>;

class PointsProperty {
public:
    PointsProperty(const Points &points) : m_points(points) { }
    Points points() const { return m_points; }
    void setPoints(const Points &points) { m_points = points; }
private:
    Points m_points;
};

class ColorProperty {
public:
    ColorProperty(const Color &color) : m_color(color) { }
    Color color() const { return m_color; }
    void setColor(const Color &color) { m_color = color; }
private:
    Color m_color;
};

class SizeProperty {
public:
    SizeProperty(scalar size) : m_size(size) { }
    scalar size() const { return m_size; }
    void setSize(scalar size) { m_size = size; }
private:
    scalar m_size;
};

class TextProperty{
public:
    TextProperty(std::string text) : m_text(text) { }
    std::string text() const { return m_text; }
    void setText(const std::string &text) { m_text = text; }
private:
    std::string m_text;
};

class PositionProperty {
public:
    PositionProperty(const Point &position, scalar angle) : m_position(position), m_angle(angle) { }
    Point position() const { return m_position; }
    void setPosition(const Point &position) { m_position = position; }
    scalar angle() const { return m_angle; }
    void setAngle(scalar angle) { m_angle = angle; }
private:
    Point m_position;
    scalar m_angle;
};

class BoxProperty {
public:
    BoxProperty(scalar width, scalar height) : m_width(width), m_height(height) { }
    scalar width() const { return m_width; }
    void setWidth(scalar width) { m_width = width; }
    scalar height() const { return m_height; }
    void setHeight(scalar height) { m_height = height; }
private:
    scalar m_width, m_height;
};

#endif
